#+TITLE: C 语言编程设定
* gtags 设定
gtags 主要用于浏览代码的，加上 pulse 可以很容易的显示目前跳到哪个函数了，还是比
较好用的。

#+BEGIN_SRC emacs-lisp
;(require 'google-c-style)
(require 'pulse)
(autoload 'gtags-mode "gtags" "" t)

(setq pulse-command-advice-flag (if window-system 1 nil))

;;(add-to-list 'ac-sources 'ac-source-gtags)
(setq pulse-command-advice-flag (if window-system 1 nil))

(defadvice goto-line (after pulse-advice activate)
  "Cause the line that is `goto'd to pulse when the cursor gets there."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice exchange-point-and-mark (after pulse-advice activate)
  "Cause the line that is `goto'd to pulse when the cursor gets there."
  (when (and pulse-command-advice-flag (interactive-p)
             (> (abs (- (point) (mark))) 400))
    (pulse-momentary-highlight-one-line (point))))
(defadvice find-tag (after pulse-advice activate)
  "After going to a tag, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice tags-search (after pulse-advice activate)
  "After going to a hit, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice tags-loop-continue (after pulse-advice activate)
  "After going to a hit, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice pop-tag-mark (after pulse-advice activate)
  "After going to a hit, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice imenu-default-goto-function (after pulse-advice activate)
  "After going to a tag, pulse the line the cursor lands on."
  (when pulse-command-advice-flag
    (pulse-momentary-highlight-one-line (point))))

(defadvice cua-exchange-point-and-mark (after pulse-advice activate)
  "Cause the line that is `goto'd to pulse when the cursor gets there."
  (when (and pulse-command-advice-flag (interactive-p)
             (> (abs (- (point) (mark))) 400))
    (pulse-momentary-highlight-one-line (point))))
(defadvice switch-to-buffer (after pulse-advice activate)
  "After switch-to-buffer, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice previous-buffer (after pulse-advice activate)
  "After previous-buffer, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice next-buffer (after pulse-advice activate)
  "After next-buffer, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice ido-switch-buffer (after pulse-advice activate)
  "After ido-switch-buffer, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice beginning-of-buffer (after pulse-advice activate)
  "After beginning-of-buffer, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))

(setq comment-style 'extra-line)
;;(add-to-list 'ac-sources 'ac-source-gtags)

#+END_SRC
* 自己的编程习惯模式设定
设置编程的 style，然后在 hook 中绑定。
#+BEGIN_SRC emacs-lisp

(defconst my-c-style
'((c-basic-offset . 4)
  (c-recognize-knr-p . nil)
  (c-tab-always-indent . t)
  (c-comment-only-line-offset . 0)
  ;(indent-tabs-mode . nil)
  (c-hanging-braces-alist . ((substatement-open after)
							 (brace-list-open)))
  (c-cleanup-list . (comment-close-slash
					 empty-defun-braces
					 list-close-comma
					 compact-empty-funcall))
  (c-offsets-alist . ((substatement-open . 0)
					  (innamespace . 0)                           ;;在namespace中不缩进
					  (case-label  . +)                           ;;case标签缩进一个c-basic-offset单位
					  (access-label . -)                          ;;private/public等标签少缩进一单位
					  (inline-open . 0)                           ;;在.h文件中写函数，括号不缩进
					  (block-open     . 0)))                      ;;在一个新块开始时不缩进
  ;;    (c-echo-syntactic-information-p t)
  ;;(setq comment-start "/*"
  ;;		comment-end "*/")
  ;;  (setq indent-tabs-mode nil))
  )
"My Cpp Coding Style")
(c-add-style "my-c-style" my-c-style)                   ;;定义完自己的style，将其添加到cc-mode的style中。

(defun my-c-common-mode ()
  "my c mode define"
  (interactive)
  (c-set-style "my-c-style")
  ;; (c-toggle-electric-state 1)
  (global-hl-line-mode 1)
  (c-toggle-auto-hungry-state 1)
  ;; (add-to-list 'write-file-functions 'delete-trailing-whitespace)
)

(add-hook 'c-mode-common-hook 'linum-mode)										;)
;;(add-hook 'c-mode-common-hook 'drag-stuff-mode)
(add-hook 'c-mode-common-hook 'my-c-common-mode)

;;(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
              (ggtags-mode 1))))

(defun cpplint ()
  "check source code format according to Google Style Guide"
  (interactive)
  (compilation-start
   (concat "python ~/bin/cpplint.py --filter=-whitespace/braces "
		   (buffer-file-name))))

#+END_SRC

* complete 设定

** ycmd 方式
** irony-mode 方式
irony 一方面功能比 async 多，不过还是先观望一阵子。不在 melpa 里面，不过作者更新
很勤快，应该很快就完整起来了，虽然现在用起来还有点怪异。先试试呗。
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

(require 'irony-eldoc)
(eval-after-load 'company
  '(add-to-list 'company-backends 'company-irony))

;; (optional) adds CC special commands to `company-begin-commands' in order to
;; trigger completion at interesting places, such as after scope operator
;;     std::|
(add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)

#+END_SRC

* 编辑 makefile 的设定
#+BEGIN_SRC emacs-lisp
(add-hook 'makefile-mode-hook
          (lambda ()
            (setq indent-tabs-mode t)))
#+END_SRC
