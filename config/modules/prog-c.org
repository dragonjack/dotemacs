#+TITLE: C 语言编程设定
* gtags 设定
gtags 主要用于浏览代码的，加上 pulse 可以很容易的显示目前跳到哪个函数了，还是比
较好用的。

#+BEGIN_SRC emacs-lisp
;(require 'google-c-style)
(require 'pulse)
(autoload 'gtags-mode "gtags" "" t)

(setq pulse-command-advice-flag (if window-system 1 nil))

(add-to-list 'ac-sources 'ac-source-gtags)
(setq pulse-command-advice-flag (if window-system 1 nil))

(defadvice goto-line (after pulse-advice activate)
  "Cause the line that is `goto'd to pulse when the cursor gets there."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice exchange-point-and-mark (after pulse-advice activate)
  "Cause the line that is `goto'd to pulse when the cursor gets there."
  (when (and pulse-command-advice-flag (interactive-p)
             (> (abs (- (point) (mark))) 400))
    (pulse-momentary-highlight-one-line (point))))
(defadvice find-tag (after pulse-advice activate)
  "After going to a tag, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice tags-search (after pulse-advice activate)
  "After going to a hit, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice tags-loop-continue (after pulse-advice activate)
  "After going to a hit, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice pop-tag-mark (after pulse-advice activate)
  "After going to a hit, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice imenu-default-goto-function (after pulse-advice activate)
  "After going to a tag, pulse the line the cursor lands on."
  (when pulse-command-advice-flag
    (pulse-momentary-highlight-one-line (point))))

(defadvice cua-exchange-point-and-mark (after pulse-advice activate)
  "Cause the line that is `goto'd to pulse when the cursor gets there."
  (when (and pulse-command-advice-flag (interactive-p)
             (> (abs (- (point) (mark))) 400))
    (pulse-momentary-highlight-one-line (point))))
(defadvice switch-to-buffer (after pulse-advice activate)
  "After switch-to-buffer, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice previous-buffer (after pulse-advice activate)
  "After previous-buffer, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice next-buffer (after pulse-advice activate)
  "After next-buffer, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice ido-switch-buffer (after pulse-advice activate)
  "After ido-switch-buffer, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))
(defadvice beginning-of-buffer (after pulse-advice activate)
  "After beginning-of-buffer, pulse the line the cursor lands on."
  (when (and pulse-command-advice-flag (interactive-p))
    (pulse-momentary-highlight-one-line (point))))

(setq comment-style 'extra-line)
(add-to-list 'ac-sources 'ac-source-gtags)

#+END_SRC
* 自己的编程习惯模式设定
设置编程的 style，然后在 hook 中绑定。
#+BEGIN_SRC emacs-lisp

(defconst my-c-style
'((c-basic-offset . 4)
  (c-recognize-knr-p . nil)
  (c-tab-always-indent . t)
  (c-comment-only-line-offset . 0)
  ;(indent-tabs-mode . nil)
  (c-hanging-braces-alist . ((substatement-open after)
							 (brace-list-open)))
  (c-cleanup-list . (comment-close-slash
					 empty-defun-braces
					 list-close-comma
					 compact-empty-funcall))
  (c-offsets-alist . ((substatement-open . 0)
					  (innamespace . 0)                           ;;在namespace中不缩进
					  (case-label  . +)                           ;;case标签缩进一个c-basic-offset单位
					  (access-label . -)                          ;;private/public等标签少缩进一单位
					  (inline-open . 0)                           ;;在.h文件中写函数，括号不缩进
					  (block-open     . 0)))                      ;;在一个新块开始时不缩进
  ;;    (c-echo-syntactic-information-p t)
  ;;(setq comment-start "/*"
  ;;		comment-end "*/")
  ;;  (setq indent-tabs-mode nil))
  )
"My Cpp Coding Style")
(c-add-style "my-c-style" my-c-style)                   ;;定义完自己的style，将其添加到cc-mode的style中。

(defun my-c-common-mode ()
  "my c mode define"
  (interactive)
  (c-set-style "my-c-style")
  ;; (c-toggle-electric-state 1)
  (global-hl-line-mode 1)
  (c-toggle-auto-hungry-state 1)
  ;; (add-to-list 'write-file-functions 'delete-trailing-whitespace)
)

(add-hook 'c-mode-common-hook 'linum-mode)										;)
;;(add-hook 'c-mode-common-hook 'drag-stuff-mode)
(add-hook 'c-mode-common-hook 'my-c-common-mode)

;;(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
              (ggtags-mode 1))))

(defun cpplint ()
  "check source code format according to Google Style Guide"
  (interactive)
  (compilation-start
   (concat "python ~/bin/cpplint.py --filter=-whitespace/braces "
		   (buffer-file-name))))

#+END_SRC

* auto-complete 设定
** auto-complete-clang-async 方式
采用 auto-complete-clang-async 来设置 clang 的补全。
从 Oh-my-emacs 中拿来的 pkg-config 的设置以及 clang 的补全设置。
这个包更新太不积极了。暂时搁置。

#+BEGIN_SRC emacs-lisp :tangle no
(defun ome-pkg-config-enable-clang-flag (pkg-config-lib)
  "This function will add necessary header file path of a
specified by `pkg-config-lib' to `ac-clang-flags', which make it
completionable by auto-complete-clang"
  (interactive "spkg-config lib: ")
  (if (executable-find "pkg-config")
      (if (= (shell-command
              (format "pkg-config %s" pkg-config-lib))
             0)
          (setq ac-clang-cflags
                (append ac-clang-cflags
                        (split-string
                         (shell-command-to-string
                          (format "pkg-config --cflags-only-I %s"
                                  pkg-config-lib)))))
        (message "Error, pkg-config lib %s not found." pkg-config-lib))
    (message "Error: pkg-config tool not found.")))

;; (defun ome-auto-complete-clang-setup ()
;;   (require-package 'auto-complete-clang-async)
;;   (require 'auto-complete-clang-async)
;;   (setq command "echo | g++ -v -x c++ -E - 2>&1 |
;;                  grep -A 20 starts | grep include | grep -v search")
;;   (setq ac-clang-cflags
;;         (mapcar (lambda (item)
;;                   (concat "-I" item))
;;                 (split-string
;;                  (shell-command-to-string command))))
;;   ;; completion for C/C++ macros.
;;   (push "-code-completion-macros" ac-clang-cflags)
;;   (push "-code-completion-patterns" ac-clang-cflags)
;;   (dolist (mode-hook '(c-mode-hook c++-mode-hook))
;;     (add-hook mode-hook
;;               (lambda ()
;;                 (add-to-list 'ac-sources 'ac-source-clang-async)))))
;;
;; (when (eq system-type 'gnu/linux)
;;  (setq ac-clang-complete-executable (concat my-emacs-path "bin/clang-complete"))
;;  (ome-auto-complete-clang-setup))

(require-package 'auto-complete-clang-async)

(defun my/load-clang-completion()
  (interactive)
  (when (not (eq system-type 'windows-nt))
    (require 'auto-complete-clang-async)
	(setq ac-clang-complete-executable (concat my-emacs-path "bin/clang-complete"))
	(setq ac-sources '(ac-source-clang-async))
	(ac-clang-launch-completion-process)))

(defun my/unload-clang-completion()
  (interactive)
  (when (not (eq system-type 'windows-nt))
	(setq ac-sources '(ac-source-gtags))
	(ac-clang-shutdown-process)))
#+END_SRC
** irony-mode 方式
irony 一方面功能比 async 多，不过还是先观望一阵子。不在 melpa 里面，不过作者更新
很勤快，应该很快就完整起来了，虽然现在用起来还有点怪异。先试试呗。
#+BEGIN_SRC emacs-lisp
;; (require-package 'irony-mode)
(add-to-list 'load-path (concat my-lisp-path "irony-mode/"))

;; (require 'auto-complete)
;; (require 'yasnippet)


;; the ac plugin will be activated in each buffer using irony-mode
;;(irony-enable 'ac)             ; hit C-RET to trigger completion

(setq irony-server-install-prefix my-emacs-path)

(defun my-c++-hooks ()
  (require 'irony) ;Note: hit `C-c C-b' to open build menu
  (require 'irony-pp)
  (require 'ac-irony)
  ;; "Enable the hooks in the preferred order: 'yas -> auto-complete -> irony'."
  ;; be cautious, if yas is not enabled before (auto-complete-mode 1), overlays
  ;; *may* persist after an expansion.
  (yas/minor-mode-on)
  (auto-complete-mode 1)
  (add-to-list 'ac-sources 'ac-source-irony)
  ;; avoid enabling irony-mode in modes that inherits c-mode, e.g: php-mode
  (when (member major-mode irony-supported-major-modes)
    (irony-mode 1)))

(add-hook 'c++-mode-hook 'my-c++-hooks)
(add-hook 'c-mode-hook 'my-c++-hooks)

#+END_SRC

* 编辑 makefile 的设定
#+BEGIN_SRC emacs-lisp
(add-hook 'makefile-mode-hook
          (lambda ()
            (setq indent-tabs-mode t)))
#+END_SRC
